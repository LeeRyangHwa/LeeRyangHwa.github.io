I"6<p>JPA를 사용하는데 가장 중요한 일은 엔티티와 테이블을 정확히 매핑하는 것이다.</p>

<ul>
  <li>객체와 테이블 매핑 : @Entity, @Table</li>
  <li>기본 키 매핑 : @Id</li>
  <li>필드와 컬럼 매핑: @Column</li>
  <li>연관관계 매핑 : @ManyToOne, @JoinColumn</li>
</ul>

<h3 id="entity">@Entity</h3>

<p>JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 어노테이션을 필수로 붙여야한다.</p>

<p>엔티티라고 부른다.</p>

<p>주의해야할 점</p>

<ul>
  <li>기본 생성자는 필수</li>
  <li>final클래스, enum, interface, inner 클래스에서는 사용할 수 없다.</li>
  <li>저장할 필드에 final을 사용하면 안된다.</li>
</ul>

<h3 id="table">@Table</h3>

<p>Table 속성</p>

<ul>
  <li>name : 매핑할 테이블 이름</li>
  <li>catalog : catalog 기능이 있는 데이터베이스에 catalog를 매핑</li>
  <li>schema : schema 기능이 있는 데이터베이스에서 schema를 매핑</li>
  <li>uniqueConstraints : DDL 생성 시에 유니크 제약조건을 만든다. 스키마 자동생성을 이용해서 DDL을 만들때만 사용</li>
</ul>

<h3 id="데이터베이스-스키마-자동-생성">데이터베이스 스키마 자동 생성</h3>

<p>JPA는 데이터베이스 스키마를 자동으로 생성하는 기능을 지원한다.</p>

<ul>
  <li>자동생성 사용법</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hibernate.hbm2ddl.auto"</span> <span class="na">value=</span><span class="s">"create"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hibernate.show_sql"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span> <span class="c">&lt;!-- DDL을 출려할 수 있다. --&gt;</span>
</code></pre></div></div>

<p>이 속성을 추가하면 애플리케이션 실행 시점에 데이터베이스 테이블을 자동으로 생성한다.</p>

<p><a href="http://hibernate.hbm2ddl.auto">hibernate.hbm2ddl.auto</a> 속성</p>

<ul>
  <li>create :  기존 테이블을 삭제하고 새로 생성</li>
  <li>create-drop : create 속성에 추가로 애플리케이션을 종료할 때 생성한 DDL을 제거</li>
  <li>update : 데이터베이스 테이블과 엔티티 매핑정보를 비교해서 변경 사항만 수정</li>
  <li>validate : 데이터 베이스 엔티티 매핑정보 를비교해서 차이가 있으면 경고를 남기고 애플리케이션을 실행하지 않는다</li>
  <li>none : 자동 생성 기능을 사용하지 않으려면 <a href="http://hibernate.hbm2ddl.auto">hibernate.hbm2ddl.auto</a> 속성 자체를 삭제하거나 유효하지 않은 옵션 값을 주면된다.</li>
</ul>

<h3 id="ddl-생성기능">@DDL 생성기능</h3>

<p>@Column(name=”NAME”, nullable = false, length = 10) « 제약을 추가할수 있다.</p>

<h3 id="기본-키-매핑">기본 키 매핑</h3>

<ul>
  <li>
    <p>직접 할당 : 기본 키를 애플리케이션에서 직접 할당</p>

    <p>@Id(@GeneratedValue : 자동 생성 전략)</p>
  </li>
  <li>
    <p>자동 할당 : 대리 키 사용 방식</p>

    <p>@IDENTITY</p>

    <p>기본 키 생성을 데이터베이스에 위임하는 전략</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Id</span>
  <span class="nd">@GenerateValue</span><span class="o">(</span><span class="nc">Strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
</code></pre></div>    </div>

    <p>@SEQUENCE</p>

    <p>유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트</p>

    <p>시퀀스를 사용해서 기본 키를 생성</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">BOADE</span><span class="p">(</span>
   <span class="n">ID</span> <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
   <span class="k">DATA</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
  <span class="p">)</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Entity</span>
  <span class="nd">@SequenceGenerator</span><span class="o">(</span>
  	<span class="n">name</span> <span class="o">=</span> <span class="s">"BOARD_SEQ_GENERATOR"</span><span class="o">,</span> <span class="c1">// 식별자 생성기 이름</span>
  	<span class="n">sequenceName</span> <span class="o">=</span> <span class="s">"BOARD_SEQ"</span><span class="o">,</span> <span class="c1">//매핑할 데이터베이스 시퀀스 이름</span>
  	<span class="n">initialValue</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span><span class="c1">// DDL을 생성할 때 처음 시작하는 수르 저장</span>
   <span class="n">allocationSize</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span> <span class="c1">// 시퀀스 한 번 호출에 증가하는 수</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Board</span><span class="o">{</span>                   
  	<span class="nd">@Id</span>
  	<span class="nd">@GeneratedValue</span> <span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">SEQUENCE</span><span class="o">,</span> <span class="n">generator</span> <span class="o">=</span> <span class="s">"BOARD_SEQ_GENERATOR"</span><span class="o">)</span>
  	<span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <p>시퀀스 사용 코드</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">logic</span><span class="o">(</span><span class="nc">EntityManager</span> <span class="n">em</span><span class="o">){</span>
   <span class="nc">Board</span> <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Board</span><span class="o">();</span>
   <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">board</span><span class="o">);</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"board.id = "</span> <span class="o">+</span> <span class="n">board</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <p>### Table 전략</p>

    <p>Table전략은 키 생성 전용 테이블을 하나 만들고 여기에 이름과 값으로 사용할 컬럼을 만들어 데이터베이스 시퀀스를 흉내내는 전략이다.</p>

    <p>Table 전략을 사용하려면 키 생성 용도로 사용할 테이블을 만들어야한다.</p>

    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">//</span><span class="err">테이블</span> <span class="err">전략</span> <span class="err">키</span> <span class="err">생성</span> <span class="n">DDL</span>
  <span class="k">create</span> <span class="k">table</span> <span class="n">MY_SEQUENCES</span><span class="p">(</span>
   <span class="n">sequence_name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
   <span class="n">next_val</span> <span class="nb">bigint</span><span class="p">,</span>
   <span class="k">primary</span> <span class="k">key</span><span class="p">(</span><span class="n">sequence_name</span><span class="p">)</span>
  <span class="p">)</span>
</code></pre></div>    </div>

    <p>sequence_name 컬럼을 시퀀스 이름으로 사용하고 next_val컬럼을 시퀀스 값으로 사용한다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Entity</span>
  <span class="nd">@TableCenerator</span><span class="o">(</span>
   <span class="n">name</span> <span class="o">=</span> <span class="s">"BOARD_SEQ_GENERATOR"</span><span class="o">,</span>
   <span class="n">talbe</span> <span class="o">=</span> <span class="s">"MY_SEQUENCES"</span><span class="o">,</span>
   <span class="n">pkColumValue</span> <span class="o">=</span> <span class="s">"BOARD_SEQ"</span><span class="o">,</span> <span class="n">allocationSize</span><span class="o">=</span><span class="mi">1</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Board</span><span class="o">{</span>
   <span class="nd">@Id</span>
   <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">TABLE</span><span class="o">,</span>
  		<span class="n">generator</span> <span class="o">=</span> <span class="s">"BOARD_SEQ_GENERATOR"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
</code></pre></div>    </div>

    <p>Table 전략 매핑 순서</p>

    <ul>
      <li>@TalbeGenerator를 사용해서 테이블 키 생성기를 등록</li>
      <li>그후 생성한 테이블 MY_SEQUENCES 테이블을 키 생성용 테이블로 매핑</li>
      <li>GenerationType.TABLE을 선택</li>
      <li>@GeneratedValue.generator에 방금 만든 테이블 키 생성기를 지정</li>
    </ul>

    <p>⇒ 이제부터 id 식별자 값은 BORAD_SEQ_GENERATOR 테이블 키 생성기가 할당</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">logic</span><span class="o">(</span><span class="nc">EntityManager</span> <span class="n">em</span><span class="o">){</span>
   <span class="nc">Board</span> <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Board</span><span class="o">();</span>
   <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">board</span><span class="o">);</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"board.id = "</span> <span class="o">+</span> <span class="n">board</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <p>### AUTO 전략</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Entity</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Board</span><span class="o">{</span>
   <span class="nd">@Id</span>
   <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
   <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
  <span class="c1">//,,,,,,</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <p>@GeneratedValue.strategy의 기본값은 AUTO다 . 따라서 다음과 같이 사용해도 결과는 값다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Id</span>
  <span class="nd">@GeneratedValue</span>
  <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
</code></pre></div>    </div>

    <p>AUTO 전략의 장점은 데이터베이스를 변경해도 코드를 수정할 필요가 없다는 것이다.</p>

    <p>## 필드와 컬럼 매핑: 레퍼런스</p>

    <p>JPA가 제공하는 필드와 컬럼 매핑용 어노테이션들을 레퍼런스 형식으로 정리해보았다.</p>

    <ul>
      <li>필드와 컬럼 매핑
        <ul>
          <li>@Column : 컬럼을 매핑한다.</li>
          <li>@Enumerated : 자바의 enum 타입을 매핑한다.</li>
          <li>@Temporal : 날짜 타입을 매핑한다.</li>
          <li>@Lob : BLOB, CLOB 타입을 매핑한다.</li>
          <li>@Transient : 특정 필드를 데이터베이스에 매핑하지 않는다.</li>
        </ul>
      </li>
      <li>기타
        <ul>
          <li>@Access : JPA가 엔티티에 접근하는 방식을 지정한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET